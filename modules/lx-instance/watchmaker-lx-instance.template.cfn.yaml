AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  AssignInstanceRole: !Not 
    - !Equals 
      - !Ref InstanceRole
      - ''
  AssignPublicIp: !Not 
    - !Equals 
      - !Ref NoPublicIp
      - 'true'
  AssignStaticPrivateIp: !Not 
    - !Equals 
      - !Ref PrivateIp
      - ''
  CreateAppVolume: !Equals 
    - !Ref AppVolumeDevice
    - 'true'
  CreatePatchGroupTag: !Not
    - !Equals
      - !Ref PatchGroup
      - ''
  ExecuteAppScript: !Not 
    - !Equals 
      - !Ref AppScriptUrl
      - ''
  InstallCloudWatchAgent: !Not 
    - !Equals 
      - !Ref CloudWatchAgentUrl
      - ''
  InstallUpdates: !Not 
    - !Equals 
      - !Ref NoUpdates
      - 'true'
  Reboot: !Not 
    - !Equals 
      - !Ref NoReboot
      - 'true'
  SupportsNvme: !Equals 
    - !FindInMap 
      - InstanceTypeMap
      - !Ref InstanceType
      - SupportsNvme
    - 'true'
  UseAdminGroups: !Not 
    - !Equals 
      - !Ref WatchmakerAdminGroups
      - ''
  UseAdminUsers: !Not 
    - !Equals 
      - !Ref WatchmakerAdminUsers
      - ''
  UseCfnUrl: !Not 
    - !Equals 
      - !Ref CfnEndpointUrl
      - ''
  UseComputerName: !Not 
    - !Equals 
      - !Ref WatchmakerComputerName
      - ''
  UseEnvironment: !Not 
    - !Equals 
      - !Ref WatchmakerEnvironment
      - ''
  UseOuPath: !Not 
    - !Equals 
      - !Ref WatchmakerOuPath
      - ''
  UseWamConfig: !Not 
    - !Equals 
      - !Ref WatchmakerConfig
      - ''
Description: >-
  This template deploys a Linux instance using Watchmaker, which applies the
  DISA STIG.
Mappings:
  Distro2RootDevice:
    AmazonLinux:
      DeviceName: xvda
    CentOS:
      DeviceName: sda1
    RedHat:
      DeviceName: sda1
  InstanceTypeMap:
    c4.large:
      SupportsNvme: 'false'
    c4.xlarge:
      SupportsNvme: 'false'
    c5.large:
      SupportsNvme: 'true'
    c5.xlarge:
      SupportsNvme: 'true'
    m4.large:
      SupportsNvme: 'false'
    m4.xlarge:
      SupportsNvme: 'false'
    m5.large:
      SupportsNvme: 'true'
    m5.xlarge:
      SupportsNvme: 'true'
    t2.large:
      SupportsNvme: 'false'
    t2.medium:
      SupportsNvme: 'false'
    t2.micro:
      SupportsNvme: 'false'
    t2.small:
      SupportsNvme: 'false'
    t2.xlarge:
      SupportsNvme: 'false'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: EC2 Instance Configuration
        Parameters:
          - AmiId
          - AmiDistro
          - InstanceType
          - InstanceRole
          - KeyPairName
          - NoPublicIp
          - NoReboot
          - NoUpdates
          - PatchGroup
          - SecurityGroupIds
      - Label:
          default: EC2 Watchmaker Configuration
        Parameters:
          - PypiIndexUrl
          - WatchmakerConfig
          - WatchmakerEnvironment
          - WatchmakerOuPath
          - WatchmakerComputerName
          - WatchmakerAdminGroups
          - WatchmakerAdminUsers
      - Label:
          default: EC2 Application Configuration
        Parameters:
          - AppScriptUrl
          - AppScriptParams
          - AppScriptShell
      - Label:
          default: EC2 Application EBS Volume
        Parameters:
          - AppVolumeDevice
          - AppVolumeMountPath
          - AppVolumeSize
          - AppVolumeType
      - Label:
          default: Network Configuration
        Parameters:
          - PrivateIp
          - SubnetId
      - Label:
          default: CloudFormation Configuration
        Parameters:
          - CfnEndpointUrl
          - CfnGetPipUrl
          - CfnBootstrapUtilsUrl
          - CloudWatchAgentUrl
          - CloudWatchAppLogs
          - ToggleCfnInitUpdate
    ParameterLabels:
      ToggleCfnInitUpdate:
        default: Force Cfn Init Update
  Version: 1.7.0
Outputs:
  WatchmakerInstanceId:
    Description: Instance ID
    Value: !Ref WatchmakerInstance
  WatchmakerInstanceLogGroupName:
    Condition: InstallCloudWatchAgent
    Description: Log Group Name
    Value: !Ref WatchmakerInstanceLogGroup
Parameters:
  AmiDistro:
    AllowedValues:
      - AmazonLinux
      - CentOS
      - RedHat
    Description: Linux distro of the AMI
    Type: String
  AmiId:
    Description: ID of the AMI to launch
    Type: 'AWS::EC2::Image::Id'
  AppScriptParams:
    Description: >-
      Parameter string to pass to the application script. Ignored if
      "AppScriptUrl" is blank
    Type: String
  AppScriptShell:
    AllowedValues:
      - bash
      - python
    Default: bash
    Description: >-
      Shell with which to execute the application script. Ignored if
      "AppScriptUrl" is blank
    Type: String
  AppScriptUrl:
    AllowedPattern: '^$|^s3://(.*)$'
    ConstraintDescription: 'Must use an S3 URL (starts with "s3://")'
    Default: ''
    Description: >-
      (Optional) S3 URL to the application script in an S3 bucket (s3://). Leave
      blank to launch without an application script. If specified, an
      appropriate "InstanceRole" is required
    Type: String
  AppVolumeDevice:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: >-
      Decision on whether to mount an extra EBS volume. Leave as default
      ("false") to launch without an extra application volume
    Type: String
  AppVolumeMountPath:
    AllowedPattern: /.*
    Default: /opt/data
    Description: >-
      Filesystem path to mount the extra app volume. Ignored if
      "AppVolumeDevice" is false
    Type: String
  AppVolumeSize:
    ConstraintDescription: Must be between 1GB and 16384GB.
    Default: 1
    Description: >-
      Size in GB of the EBS volume to create. Ignored if "AppVolumeDevice" is
      false
    MaxValue: 16384
    MinValue: 1
    Type: Number
  AppVolumeType:
    AllowedValues:
      - gp2
      - io1
      - sc1
      - st1
      - standard
    Default: gp2
    Description: Type of EBS volume to create. Ignored if "AppVolumeDevice" is false
    Type: String
  CfnBootstrapUtilsUrl:
    AllowedPattern: '^http[s]?://.*\.tar\.gz$'
    Default: >-
      https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
    Description: URL to aws-cfn-bootstrap-latest.tar.gz
    Type: String
  CfnEndpointUrl:
    AllowedPattern: '^$|^http[s]?://.*$'
    Default: 'https://cloudformation.us-east-1.amazonaws.com'
    Description: >-
      (Optional) URL to the CloudFormation Endpoint. e.g.
      https://cloudformation.us-east-1.amazonaws.com
    Type: String
  CfnGetPipUrl:
    AllowedPattern: '^http[s]?://.*\.py$'
    Default: 'https://bootstrap.pypa.io/get-pip.py'
    Description: URL to get-pip.py
    Type: String
  CloudWatchAgentUrl:
    AllowedPattern: '^$|^s3://.*$'
    Default: ''
    Description: >-
      (Optional) S3 URL to CloudWatch Agent installer. Example:
      s3://amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip
    Type: String
  CloudWatchAppLogs:
    Default: ''
    Description: >-
      (Optional) List of application log file paths to send to CloudWatch. Example: path01/file01.log, path02/file02.log
    Type: CommaDelimitedList
  InstanceRole:
    Default: ''
    Description: (Optional) IAM instance role to apply to the instance
    Type: String
  InstanceType:
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - c4.large
      - c4.xlarge
      - m4.large
      - m4.xlarge
      - c5.large
      - c5.xlarge
      - m5.large
      - m5.xlarge
    Default: t2.micro
    Description: Amazon EC2 instance type
    Type: String
  KeyPairName:
    Description: >-
      Public/private key pairs allow you to securely connect to your instance
      after it launches
    Type: 'AWS::EC2::KeyPair::KeyName'
  NoPublicIp:
    AllowedValues:
      - 'false'
      - 'true'
    Default: 'true'
    Description: >-
      Controls whether to assign the instance a public IP. Recommended to leave
      at "true" _unless_ launching in a public subnet
    Type: String
  NoReboot:
    AllowedValues:
      - 'false'
      - 'true'
    Default: 'false'
    Description: >-
      Controls whether to reboot the instance as the last step of cfn-init
      execution
    Type: String
  NoUpdates:
    AllowedValues:
      - 'false'
      - 'true'
    Default: 'false'
    Description: >-
      Controls whether to run yum update during a stack update (on the initial
      instance launch, Watchmaker _always_ installs updates)
    Type: String
  PatchGroup:
    Default: ''
    Description: >-
      (Optional) Key value of the Patch Group tag. Controls whether to create a PatchGroup
      tag that can be leveraged via SSM to auto-update instances.
    Type: String
  PrivateIp:
    Default: ''
    Description: >-
      (Optional) Set a static, primary private IP. Leave blank to auto-select a
      free IP
    Type: String
  PypiIndexUrl:
    AllowedPattern: '^http[s]?://.*$'
    Default: 'https://pypi.org/simple'
    Description: URL to the PyPi Index
    Type: String
  SecurityGroupIds:
    Description: List of security groups to apply to the instance
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
  SubnetId:
    Description: ID of the subnet to assign to the instance
    Type: 'AWS::EC2::Subnet::Id'
  ToggleCfnInitUpdate:
    AllowedValues:
      - A
      - B
    Default: A
    Description: >-
      A/B toggle that forces a change to instance metadata, triggering the
      cfn-init update sequence
    Type: String
  WatchmakerAdminGroups:
    Default: ''
    Description: >-
      (Optional) Colon-separated list of domain groups that should have admin
      permissions on the EC2 instance
    Type: String
  WatchmakerAdminUsers:
    Default: ''
    Description: >-
      (Optional) Colon-separated list of domain users that should have admin
      permissions on the EC2 instance
    Type: String
  WatchmakerComputerName:
    Default: ''
    Description: (Optional) Sets the hostname/computername within the OS
    Type: String
  WatchmakerConfig:
    AllowedPattern: '^$|^(http[s]?|s3|file)://.*$'
    Default: ''
    Description: >-
      (Optional) Path to a Watchmaker config file.  The config file path can be
      a remote source (i.e. http[s]://, s3://) or local directory (i.e. file://)
    Type: String
  WatchmakerEnvironment:
    AllowedValues:
      - ''
      - dev
      - test
      - prod
    Default: ''
    Description: Environment in which the instance is being deployed
    Type: String
  WatchmakerOuPath:
    AllowedPattern: '^$|^(OU=.+,)+(DC=.+)+$'
    Default: ''
    Description: >-
      (Optional) DN of the OU to place the instance when joining a domain. If
      blank and "WatchmakerEnvironment" enforces a domain join, the instance
      will be placed in a default container. Leave blank if not joining a
      domain, or if "WatchmakerEnvironment" is "false"
    Type: String
Resources:
  WatchmakerInstance:
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT30M
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          launch:
            - setup
            - !If 
              - InstallCloudWatchAgent
              - cw-agent-install
              - !Ref 'AWS::NoValue'
            - watchmaker-install
            - watchmaker-launch
            - !If 
              - ExecuteAppScript
              - make-app
              - !Ref 'AWS::NoValue'
            - finalize
            - !If 
              - Reboot
              - reboot
              - !Ref 'AWS::NoValue'
          update:
            - setup
            - !If 
              - InstallUpdates
              - install-updates
              - !Ref 'AWS::NoValue'
            - watchmaker-install
            - watchmaker-update
            - !If 
              - ExecuteAppScript
              - make-app
              - !Ref 'AWS::NoValue'
            - finalize
            - !If 
              - Reboot
              - reboot
              - !Ref 'AWS::NoValue'
        cw-agent-install:
          commands:
            01-get-cloudwatch-agent:
              command: !Sub >-
                install -Dbm 700 -o root -g root /dev/null
                /etc/cfn/scripts/AmazonCloudWatchAgent.zip &&
                aws s3 cp ${CloudWatchAgentUrl}
                /etc/cfn/scripts/AmazonCloudWatchAgent.zip
            02-extract-cloudwatch-agent:
              command: >-
                yum -y install unzip &&
                unzip /etc/cfn/scripts/AmazonCloudWatchAgent.zip -d /etc/cfn/scripts/aws-cw-agent
            03-manipulate-cloudwatch-config:
              command: >-
                python3 /etc/cfn/scripts/aws-cw-agent/cloudwatch-applog-config.py
            10-install-cloudwatch-agent:
              command: >-
                bash -xe install.sh &&
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl
                -a fetch-config -m ec2 -c
                file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
              cwd: /etc/cfn/scripts/aws-cw-agent
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |-
                    { 
                      "logs": 
                      {
                        "logs_collected":
                        {
                          "files": 
                          {
                            "collect_list": [ 
                              {
                                "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                                "log_group_name": "/aws/ec2/lx/${AWS::StackName}",
                                "log_stream_name": "cloudwatch_agent_logs_{instance_id}",
                                "timestamp_format": "%H:%M:%S %y %b %-d" 
                              },
                              {
                                "file_path": "/var/log/cfn-init.log",
                                "log_group_name": "/aws/ec2/lx/${AWS::StackName}",
                                "log_stream_name": "cfn_init_logs_{instance_id}",
                                "timestamp_format": "%H:%M:%S %y %b %-d" 
                              },
                              {
                                "file_path": "/var/log/messages",
                                "log_group_name": "/aws/ec2/lx/${AWS::StackName}",
                                "log_stream_name": "messages_logs_{instance_id}",
                                "timestamp_format": "%H:%M:%S %y %b %-d"
                              },
                              {
                                "file_path": "/var/log/watchmaker/watchmaker.log",
                                "log_group_name": "/aws/ec2/lx/${AWS::StackName}",
                                "log_stream_name": "watchmaker_logs_{instance_id}",
                                "timestamp_format": "%H:%M:%S %y %b %-d"
                              },
                              {
                                "file_path": "/var/log/watchmaker/salt_call.debug.log",
                                "log_group_name": "/aws/ec2/lx/${AWS::StackName}",
                                "log_stream_name": "salt_call_debug_logs_{instance_id}",
                                "timestamp_format": "%H:%M:%S %y %b %-d"
                              }
                            ]
                          }
                        },
                        "log_stream_name": "default_logs_{instance_id}"
                      }
                    }
            /etc/cfn/scripts/aws-cw-agent/cloudwatch-applog-config.py:
              content: !Sub
                - |-
                  import json
                  import os
                  
                  cloudwatch_baseline = "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json"
                  log_group_name = "/aws/ec2/lx/${AWS::StackName}"
                  log_paths_input = (r'''${local_addCWLtarget}''').split(",")


                  def get_stream_name(log_path):
                      log_no_ext = os.path.splitext(os.path.basename(log_path))[0]
                      return "{}_logs_{{instance_id}}".format(log_no_ext)


                  def load_baseline():
                      print('Loading existing cwl baseline')
                      with open(cloudwatch_baseline, 'r') as f:
                          return json.load(f)


                  def write_baseline(baseline):
                      print('Writing new cwl baseline')
                      with open(cloudwatch_baseline, 'w') as f:
                          f.write(json.dumps(baseline, sort_keys=True, indent=4))


                  if log_paths_input:
                      print('Additional cwl paths were defined.')
                      baseline = load_baseline()
                      for log_path in log_paths_input:
                          baseline['logs']['logs_collected']['files']['collect_list'].append({
                              'file_path': log_path,
                              'log_group_name': log_group_name,
                              'log_stream_name': get_stream_name(log_path),
                              'timestamp_format': "%H:%M:%S %y %b %-d"
                          })
                      write_baseline(baseline)
                      print('CWL baseline modification complete')
                # convert CommaDelimitedList to a string for Fn::Sub compatibility
                - local_addCWLtarget: !Join ["," ,!Ref CloudWatchAppLogs]
        finalize:
          commands:
            10-signal-success:
              command: !Sub
                - >-
                  cfn-signal -e 0 --stack ${AWS::StackName} --resource WatchmakerInstance --region ${AWS::Region}
                  ${local_AssignInstanceRole} 
                  ${local_UseCfnUrl}
                - 
                  local_AssignInstanceRole: !If [AssignInstanceRole, !Sub '--role ${InstanceRole}', '']
                  local_UseCfnUrl: !If [UseCfnUrl, !Sub '--url ${CfnEndpointUrl}', '']
              ignoreErrors: 'true'
        install-updates:
          commands:
            10-install-updates:
              command: yum -y update
        make-app:
          commands:
            05-get-appscript:
              command: 
                !Sub >-
                    mkdir -p /etc/cfn/scripts &&
                    aws s3 cp ${AppScriptUrl}
                    /etc/cfn/scripts/make-app &&
                    chown root:root /etc/cfn/scripts/make-app &&
                    chmod 700 /etc/cfn/scripts/make-app
            10-make-app:
              command: !Sub '${AppScriptShell} /etc/cfn/scripts/make-app ${AppScriptParams}'
        reboot:
          commands:
            10-reboot:
              command: shutdown -r +1 &
        setup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub
                - |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                  ${local_AssignInstanceRole}
                  ${local_UseCfnUrl}
                  interval=1
                  verbose=true
                - 
                  local_AssignInstanceRole: !If [AssignInstanceRole, !Sub 'role=${InstanceRole}', '']
                  local_UseCfnUrl: !If [UseCfnUrl, !Sub 'url=${CfnEndpointUrl}', '']
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub 
                - |-
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.WatchmakerInstance.Metadata
                    action=cfn-init -v -c update --stack ${AWS::StackName} --resource WatchmakerInstance --region ${AWS::Region} ${local_AssignInstanceRole} ${local_UseCfnUrl}
                    runas=root
                - 
                  local_AssignInstanceRole: !If [AssignInstanceRole, !Sub '--role ${InstanceRole}', '']
                  local_UseCfnUrl: !If [UseCfnUrl, !Sub '--url ${CfnEndpointUrl}', '']
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/scripts/watchmaker-install.sh:
              content: !Sub |
                  #!/bin/bash
                  PYPI_URL=${PypiIndexUrl}

                  # Setup terminal support for UTF-8
                  export LC_ALL=en_US.UTF-8
                  export LANG=en_US.UTF-8

                  curl --silent --show-error --retry 5 -L ${CfnGetPipUrl} | python3 - --index-url="$PYPI_URL"
                  pip install --index-url="$PYPI_URL" --upgrade pip setuptools boto3
                  pip install --index-url="$PYPI_URL" --upgrade watchmaker
              group: root
              mode: '000700'
              owner: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        watchmaker-install:
          commands:
            10-watchmaker-install:
              command: bash -xe /etc/cfn/scripts/watchmaker-install.sh
        watchmaker-launch:
          commands:
            10-watchmaker-launch:
              command: !Sub
                - >-
                  watchmaker --log-level debug --log-dir /var/log/watchmaker --no-reboot
                  ${local_UseWamConfig}
                  ${local_UseEnvironment}
                  ${local_UseOUPath}
                  ${local_UseComputerName}
                  ${local_UseAdminGroups}
                  ${local_UseAdminUsers}
                -
                  local_UseWamConfig: !If [UseWamConfig, !Sub '--config ${WatchmakerConfig}', '']
                  local_UseEnvironment: !If [UseEnvironment, !Sub '--env ${WatchmakerEnvironment}', '']
                  local_UseOUPath: !If [UseOuPath, !Sub '--ou-path ${WatchmakerOuPath}', '']
                  local_UseComputerName: !If [UseComputerName, !Sub '--computer-name ${WatchmakerComputerName}', '']
                  local_UseAdminGroups: !If [UseAdminGroups, !Sub '--admin-groups ${WatchmakerAdminGroups}', '']
                  local_UseAdminUsers: !If [UseAdminUsers, !Sub '--admin-users ${WatchmakerAdminUsers}', '']
        watchmaker-update:
          commands:
            10-watchmaker-update:
              command: !Sub
                - >-
                  watchmaker --log-level debug --log-dir /var/log/watchmaker --no-reboot --salt-states None
                  ${local_UseWamConfig}
                  ${local_UseEnvironment}
                  ${local_UseOUPath}
                  ${local_UseComputerName}
                  ${local_UseAdminGroups}
                  ${local_UseAdminUsers}
                -
                  local_UseWamConfig: !If [UseWamConfig, !Sub '--config ${WatchmakerConfig}', '']
                  local_UseEnvironment: !If [UseEnvironment, !Sub '--env ${WatchmakerEnvironment}', '']
                  local_UseOUPath: !If [UseOuPath, !Sub '--ou-path ${WatchmakerOuPath}', '']
                  local_UseComputerName: !If [UseComputerName, !Sub '--computer-name ${WatchmakerComputerName}', '']
                  local_UseAdminGroups: !If [UseAdminGroups, !Sub '--admin-groups ${WatchmakerAdminGroups}', '']
                  local_UseAdminUsers: !If [UseAdminUsers, !Sub '--admin-users ${WatchmakerAdminUsers}', '']
      ToggleCfnInitUpdate: !Ref ToggleCfnInitUpdate
    Properties:
      BlockDeviceMappings:
        - DeviceName: !Sub 
            - '/dev/${local_Distro2RootDevice}'
            - local_Distro2RootDevice: !FindInMap [Distro2RootDevice, !Ref AmiDistro, DeviceName]
          Ebs:
            DeleteOnTermination: true
            VolumeType: gp2
        - !If 
          - CreateAppVolume
          - DeviceName: /dev/xvdf
            Ebs:
              DeleteOnTermination: true
              VolumeSize: !Ref AppVolumeSize
              VolumeType: !Ref AppVolumeType
          - !Ref 'AWS::NoValue'
      IamInstanceProfile: !If 
        - AssignInstanceRole
        - !Ref InstanceRole
        - !Ref 'AWS::NoValue'
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      NetworkInterfaces:
        - AssociatePublicIpAddress: !If 
            - AssignPublicIp
            - true
            - false
          DeviceIndex: '0'
          GroupSet: !Ref SecurityGroupIds
          PrivateIpAddress: !If 
            - AssignStaticPrivateIp
            - !Ref PrivateIp
            - !Ref 'AWS::NoValue'
          SubnetId: !Ref SubnetId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
        - !If
          - CreatePatchGroupTag
          -
            Key: Patch Group
            Value: !Ref PatchGroup
          - !Ref 'AWS::NoValue'
      UserData: 
        !Base64
          Fn::Sub:
            - |
              Content-Type: multipart/mixed; boundary="===============3585321300151562773=="
              MIME-Version: 1.0
              --===============3585321300151562773==
              Content-Type: text/cloud-config; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="cloud.cfg"

              #cloud-config
              ${local_CreateAppVolume}

              --===============3585321300151562773==
              Content-Type: text/x-shellscript; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="script.sh"

              #!/bin/bash -xe

              # Setup terminal support for UTF-8
              export LC_ALL=en_US.UTF-8
              export LANG=en_US.UTF-8

              # Export AWS ENVs
              test -r /etc/aws/models/endpoints.json && export AWS_DATA_PATH=/etc/aws/models || true
              export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt
              export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt
              export AWS_DEFAULT_REGION=${AWS::Region}

              # Get pip
              PYPI_URL=${PypiIndexUrl}
              curl --silent --show-error --retry 5 -L ${CfnGetPipUrl} | python3 - --index-url="$PYPI_URL"
              
              # Add pip to path
              hash pip 2> /dev/null || PATH="${!PATH}:/usr/local/bin"

              # Upgrade pip and setuptools
              pip install --index-url="$PYPI_URL" --upgrade pip setuptools

              # Fix python urllib3 warnings
              yum -y install gcc python-devel libffi-devel openssl-devel
              pip install --index-url="$PYPI_URL" --upgrade cffi
              pip install --index-url="$PYPI_URL" --upgrade cryptography
              if [[ $(rpm --quiet -q aws-cfn-bootstrap || pip show --quiet aws-cfn-bootstrap)$? -ne 0 ]]
              then
                # Get cfn utils
                pip install --index-url="$PYPI_URL" --upgrade --upgrade-strategy only-if-needed ${CfnBootstrapUtilsUrl}

                # Fixup cfn utils
                INITDIR=$(find -L /opt/aws/apitools/cfn-init/init -name redhat 2> /dev/null || echo /usr/init/redhat)
                chmod 775 ${!INITDIR}/cfn-hup
                ln -f -s ${!INITDIR}/cfn-hup /etc/rc.d/init.d/cfn-hup
                chkconfig --add cfn-hup
                chkconfig cfn-hup on
                mkdir -p /opt/aws/bin
                BINDIR=$(find -L /opt/aws/apitools/cfn-init -name bin 2> /dev/null || echo /usr/bin)
                for SCRIPT in cfn-elect-cmd-leader cfn-get-metadata cfn-hup cfn-init cfn-send-cmd-event cfn-send-cmd-result cfn-signal
                do
                  ln -s ${!BINDIR}/${!SCRIPT} /opt/aws/bin/${!SCRIPT} 2> /dev/null || echo Skipped symbolic link, /opt/aws/bin/${!SCRIPT} already exists
                done
              fi

              # Remove gcc now that it is no longer needed
              yum -y remove gcc --setopt=clean_requirements_on_remove=1
              # Add cfn utils to path
              hash cfn-signal 2> /dev/null || PATH="${!PATH}:/usr/local/bin:/opt/aws/bin"

              # Execute cfn-init
              cfn-init -v -c launch --stack ${AWS::StackName} --resource WatchmakerInstance --region ${AWS::Region} \
                ${local_AssignInstanceRole} ${local_UseCfnUrl} || \
                ( echo 'ERROR: cfn-init failed! Aborting!'; cfn-signal -e 1 --stack ${AWS::StackName} --resource WatchmakerInstance --region ${AWS::Region} \
                ${local_AssignInstanceRole} ${local_UseCfnUrl}; exit 1)
              --===============3585321300151562773==--
            - 
              local_CreateAppVolume: !If 
                - CreateAppVolume
                - !Sub
                  - |+
                      bootcmd:
                        - cloud-init-per instance mkfs-appvolume mkfs -t ext4 ${local_SupportsNvme}
                      mounts: 
                        - [${local_SupportsNvme}, ${AppVolumeMountPath}]
                  - local_SupportsNvme: !If [SupportsNvme, /dev/nvme1n1, /dev/xvdf]
                - ''
              local_AssignInstanceRole: !If [AssignInstanceRole, !Sub '--role ${InstanceRole}', '']
              local_UseCfnUrl: !If [UseCfnUrl, !Sub '--url ${CfnEndpointUrl}', '']
    Type: 'AWS::EC2::Instance'
  WatchmakerInstanceLogGroup:
    Condition: InstallCloudWatchAgent
    Properties:
      LogGroupName: !Sub '/aws/ec2/lx/${AWS::StackName}'
    Type: 'AWS::Logs::LogGroup'
