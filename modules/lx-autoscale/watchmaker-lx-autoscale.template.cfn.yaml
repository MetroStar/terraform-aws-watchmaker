AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  AsgNotificationsDefined: !Not
    - !Equals
      - !Join [ ",", !Ref AsgNotificationTypes]
      - ''
  AsgSnsArnDefined: !Not
    - !Equals
      - !Ref AsgSnsArn
      - ''
  AssignInstanceRole: !Not
    - !Equals
      - !Ref InstanceRole
      - ''
  AssignPublicIp: !Not
    - !Equals
      - !Ref NoPublicIp
      - 'true'
  CreateAppVolume: !Equals
    - !Ref AppVolumeDevice
    - 'true'
  CreatePatchGroupTag: !Not
    - !Equals
      - !Ref PatchGroup
      - ''
  EnablingRepos: !Not
    - !Equals
      - !Ref EnableRepos
      - ''
  ExecuteAppScript: !Not
    - !Equals
      - !Ref AppScriptUrl
      - ''
  ExpandRootVolume: !Not
    - !Equals
      - !Ref RootVolumeSize
      - "20"
  InstallCloudWatchAgent: !Not
    - !Equals
      - !Ref CloudWatchAgentUrl
      - ''
  InstallUpdates: !Not
    - !Equals
      - !Ref NoUpdates
      - 'true'
  PinWatchmakerVersion: !Not
    - !Equals
      - !Ref WatchmakerVersion
      - ''
  Reboot: !Not
    - !Equals
      - !Ref NoReboot
      - 'true'
  UseAdminGroups: !Not
    - !Equals
      - !Ref WatchmakerAdminGroups
      - ''
  UseAdminUsers: !Not
    - !Equals
      - !Ref WatchmakerAdminUsers
      - ''
  UseAppVolumeSnapshot: !Not
    - !Equals
      - !Ref AppVolumeSnapshotId
      - ''
  UseAsgMetricsCollection: !Not
    - !Equals
      - !Join [ "," , !Ref AsgMetrics]
      - ''
  UseAsgNotifications: !And
    - !Condition AsgNotificationsDefined
    - !Condition AsgSnsArnDefined
  UseCfnUrl: !Not
    - !Equals
      - !Ref CfnEndpointUrl
      - ''
  UseElbHealthCheck: !Or
    - !Condition UseLoadBalancerNames
    - !Condition UseTargetGroupArns
  UseEnvironment: !Not
    - !Equals
      - !Ref WatchmakerEnvironment
      - ''
  UseLoadBalancerNames: !Not
    - !Equals
      - !Join
        - ''
        - !Ref LoadBalancerNames
      - ''
  UseOuPath: !Not
    - !Equals
      - !Ref WatchmakerOuPath
      - ''
  UseScheduledAction: !And
    - !Not
      - !Equals
        - !Ref ScaleUpSchedule
        - ''
    - !Not
      - !Equals
        - !Ref ScaleDownSchedule
        - ''
  UseTargetGroupArns: !Not
    - !Equals
      - !Join
        - ''
        - !Ref TargetGroupArns
      - ''
  UseTerminationPolicies: !Not
    - !Equals
      - !Join [ "," , !Ref InstanceTerminationPolicies]
      - ''
  UseWamConfig: !Not
    - !Equals
      - !Ref WatchmakerConfig
      - ''
  UseWamStandalone: !Not
    - !Equals
      - !Ref WatchmakerStandaloneUrl
      - ''
Description: >-
  This template creates an Autoscaling Group and Launch Template that
  deploys Linux instances with Watchmaker, which applies the DISA STIG.
Mappings:
  Distro2RootDevice:
    AmazonLinux:
      DeviceName: xvda
    CentOS:
      DeviceName: sda1
    RedHat:
      DeviceName: sda1
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EC2 Instance Configuration
        Parameters:
          - AmiId
          - AmiDistro
          - InstanceType
          - InstanceRole
          - KeyPairName
          - NoPublicIp
          - NoReboot
          - NoUpdates
          - PatchGroup
          - RootVolumeEncrypted
          - RootVolumeSize
          - SecurityGroupIds
      - Label:
          default: EC2 Watchmaker Configuration
        Parameters:
          - WatchmakerConfig
          - WatchmakerEnvironment
          - WatchmakerOuPath
          - WatchmakerAdminGroups
          - WatchmakerAdminUsers
          - WatchmakerExtraArgs
          - PypiIndexUrl
          - WatchmakerVersion
          - WatchmakerStandaloneUrl
      - Label:
          default: EC2 Application Configuration
        Parameters:
          - AppScriptUrl
          - AppScriptParams
          - AppScriptShell
      - Label:
          default: EC2 Application EBS Volume
        Parameters:
          - AppVolumeDevice
          - AppVolumeDeviceName
          - AppVolumeEncrypted
          - AppVolumeMountPath
          - AppVolumeSize
          - AppVolumeSnapshotId
          - AppVolumeType
      - Label:
          default: AutoScale Configuration
        Parameters:
          - AsgMetrics
          - AsgNotificationTypes
          - AsgSnsArn
          - DesiredCapacity
          - EbsOptimized
          - InstanceTerminationPolicies
          - MinCapacity
          - MaxCapacity
          - ScaleDownSchedule
          - ScaleUpSchedule
          - TargetGroupArns
          - LoadBalancerNames
      - Label:
          default: Network Configuration
        Parameters:
          - SubnetIds
      - Label:
          default: CloudFormation Configuration
        Parameters:
          - CfnEndpointUrl
          - CfnStackSignalTimeout
          - CloudWatchAgentUrl
          - CloudWatchAppLogs
          - ToggleCfnInitUpdate
          - ToggleNewInstances
    ParameterLabels:
      ToggleCfnInitUpdate:
        default: Force Cfn Init Update
      ToggleNewInstances:
        default: Force New Instances
  Version: 2.1.1
Outputs:
  ScaleDownScheduledAction:
    Condition: UseScheduledAction
    Description: Scale Down Scheduled Action ID
    Value: !Ref ScaleDownScheduledAction
  ScaleUpScheduledAction:
    Condition: UseScheduledAction
    Description: Scale Up Scheduled Action ID
    Value: !Ref ScaleUpScheduledAction
  WatchmakerAutoScalingGroupId:
    Description: Autoscaling Group ID
    Value: !Ref WatchmakerAutoScalingGroup
  WatchmakerLaunchTemplateId:
    Description: Launch Template ID
    Value: !Ref WatchmakerLaunchTemplate
  WatchmakerLaunchConfigLogGroupName:
    Condition: InstallCloudWatchAgent
    Description: Log Group Name
    Value: !Ref WatchmakerLaunchConfigLogGroup
Parameters:
  AmiDistro:
    AllowedValues:
      - AmazonLinux
      - CentOS
      - RedHat
    Description: Linux distro of the AMI
    Type: String
  AmiId:
    Description: ID of the AMI to launch
    Type: AWS::EC2::Image::Id
  AppScriptParams:
    Description: >-
      Parameter string to pass to the application script. Ignored if
      "AppScriptUrl" is blank
    Type: String
  AppScriptShell:
    AllowedValues:
      - bash
      - python
    Default: bash
    Description: >-
      Shell with which to execute the application script. Ignored if
      "AppScriptUrl" is blank
    Type: String
  AppScriptUrl:
    AllowedPattern: '^$|^s3://(.*)$'
    ConstraintDescription: 'Must use an S3 URL (starts with "s3://")'
    Default: ''
    Description: >-
      (Optional) S3 URL to the application script in an S3 bucket (s3://). Leave
      blank to launch without an application script. If specified, an
      appropriate "InstanceRole" is required
    Type: String
  AppVolumeDevice:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: >-
      Decision whether to mount an extra EBS volume. Leave as default ("false")
      to launch without an extra application volume
    Type: String
  AppVolumeDeviceName:
    AllowedPattern: '/dev/xvd[f-k]'
    Default: '/dev/xvdf'
    Description: >-
      Device name to be given to extra EBS volume. Ignored if "AppVolumeDevice"
      is false
    Type: String
  AppVolumeEncrypted:
    AllowedValues:
      - 'false'
      - 'true'
    Default: 'false'
    Description: >-
      Controls whether to encrypt the EBS volume.
    Type: String
  AppVolumeMountPath:
    AllowedPattern: /.*
    Default: /opt/data
    Description: >-
      Filesystem path to mount the extra app volume. Ignored if
      "AppVolumeDevice" is false
    Type: String
  AppVolumeSize:
    ConstraintDescription: Must be between 1GB and 16384GB.
    Default: 1
    Description: >-
      Size in GB of the EBS volume to create. Ignored if "AppVolumeDevice" is
      false
    MaxValue: 16384
    MinValue: 1
    Type: Number
  AppVolumeSnapshotId:
    AllowedPattern: '^$|snap-[a-z0-9]+'
    Default: ''
    Description: >-
      (Optional) EBS Snapshot ID from which to create the AppVolume. "AppVolumeSize"
      must be equal or greater than the size of the snapshot. Ignored if "AppVolumeDevice"
      is false
    Type: String
  AppVolumeType:
    AllowedValues:
      - gp2
      - io1
      - sc1
      - st1
      - standard
    Default: gp2
    Description: Type of EBS volume to create. Ignored if "AppVolumeDevice" is false
    Type: String
  AsgMetrics:
    Default: ''
    Description: >-
      (Optional) The list of Asg metrics to collect. Must define MetricsCollectionGranularity to enable.
      Define MetricsCollectionGranularity and leave this option blank to collect all metrics
    Type: CommaDelimitedList
  AsgNotificationTypes:
    Default: ''
    Description: >-
      (Optional) A list of event types that trigger a notification. Event types can include any of the following
      types: autoscaling:EC2_INSTANCE_LAUNCH, autoscaling:EC2_INSTANCE_LAUNCH_ERROR, autoscaling:EC2_INSTANCE_TERMINATE,
      autoscaling:EC2_INSTANCE_TERMINATE_ERROR, and autoscaling:TEST_NOTIFICATION.
      NOTE: Must be defined in conjunction with AsgSnsArn.
    Type: CommaDelimitedList
  AsgSnsArn:
    Default: ''
    Description: >-
      (Optional) The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to send Asg events to.
      NOTE: Must be defined in conjunction with AsgNotificationTypes.
    Type: String
  CfnEndpointUrl:
    AllowedPattern: '^$|^http[s]?://.*$'
    Default: 'https://cloudformation.us-east-1.amazonaws.com'
    Description: >-
      (Optional) URL to the CloudFormation Endpoint. e.g.
      https://cloudformation.us-east-1.amazonaws.com
    Type: String
  CfnStackSignalTimeout:
    ConstraintDescription: Set a value between 1 and 720.
    Default: 30
    Description: >-
      The amount of time in minutes that can pass before the stack status becomes CREATE_FAILED
    MaxValue: 720
    MinValue: 1
    Type: Number
  CloudWatchAgentUrl:
    AllowedPattern: '^$|^s3://.*\.rpm$'
    Default: ''
    Description: >-
      (Optional) S3 URL to CloudWatch Agent installer. Example(CentOS):
      s3://amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm
    Type: String
  CloudWatchAppLogs:
    Default: ''
    Description: >-
      (Optional) List of application log file paths to send to CloudWatch. Example: path01/file01.log, path02/file02.log
    Type: CommaDelimitedList
  DesiredCapacity:
    Default: 1
    Description: Desired number of instances in the Autoscaling Group
    Type: Number
  EbsOptimized:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: >-
      Specifies whether the launch template is optimized for EBS I/O. This optimization provides
      dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance.
      Warning: Stack creation will fail if set to true and the instance type does not support EBS Optimization.
      See complete list of supported instances here:
      https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html#ebs-optimization-support
    Type: String
  EnableRepos:
    Default: ''
    Description: '(Optional) Specify repos to be enabled by yum-config-manager. Example: epel'
    Type: String
  InstanceRole:
    Default: ''
    Description: (Optional) IAM instance role to apply to the instance(s)
    Type: String
  InstanceTerminationPolicies:
    Default: ''
    Description: >-
      (Optional) A list of policies that are used to select the instances to terminate.
      The policies are executed in the order that you list them.
    Type: CommaDelimitedList
  InstanceType:
    AllowedPattern: '.*\..*'
    Default: t2.micro
    Description: Amazon EC2 instance type
    Type: String
  KeyPairName:
    Description: >-
      Public/private key pairs allow you to securely connect to your instance
      after it launches
    Type: AWS::EC2::KeyPair::KeyName
  LoadBalancerNames:
    Default: ''
    Description: >-
      Comma-separated string of Classic ELB Names to associate with the
      Autoscaling Group; conflicts with TargetGroupArns
    Type: CommaDelimitedList
  MaxCapacity:
    Default: 2
    Description: Maximum number of instances in the Autoscaling Group
    Type: Number
  MinCapacity:
    Default: 1
    Description: Minimum number of instances in the Autoscaling Group
    Type: Number
  NoPublicIp:
    AllowedValues:
      - 'false'
      - 'true'
    Default: 'true'
    Description: >-
      Controls whether to assign the instance a public IP. Recommended to leave
      at "true" _unless_ launching in a public subnet
    Type: String
  NoReboot:
    AllowedValues:
      - 'false'
      - 'true'
    Default: 'false'
    Description: >-
      Controls whether to reboot the instance as the last step of cfn-init
      execution
    Type: String
  NoUpdates:
    AllowedValues:
      - 'false'
      - 'true'
    Default: 'false'
    Description: >-
      Controls whether to run yum update during a stack update (on the initial
      instance launch, Watchmaker _always_ installs updates)
    Type: String
  PatchGroup:
    Default: ''
    Description: >-
      (Optional) Key value of the Patch Group tag. Controls whether to create a PatchGroup
      tag that can be leveraged via SSM to auto-update instances.
    Type: String
  PypiIndexUrl:
    AllowedPattern: '^http[s]?://.*$'
    Default: 'https://pypi.org/simple'
    Description: URL to the PyPi Index
    Type: String
  RootVolumeEncrypted:
    AllowedValues:
      - 'false'
      - 'true'
    Default: 'false'
    Description: >-
      Controls whether to encrypt the root volume.
    Type: String
  RootVolumeSize:
    Default: "20"
    Description: >-
      Root Volume Size in GB **NOTE** This value can be set larger than the default (20GB) but NOT smaller
      If set larger than default value root partition will need to be expanded manually.
    Type: String
  ScaleDownSchedule:
    Default: ''
    Description: >-
      (Optional) Scheduled Action in cron-format (UTC) to scale down to
      MinCapacity; ignored if empty or ScaleUpSchedule is unset (E.g. "0 0 * * *")
    Type: String
  ScaleUpSchedule:
    Default: ''
    Description: >-
      (Optional) Scheduled Action in cron-format (UTC) to scale up to
      MaxCapacity; ignored if empty or ScaleDownSchedule is unset (E.g. "0 10 * * Mon-Fri")
    Type: String
  SecurityGroupIds:
    Description: List of security groups to apply to the instance(s)
    Type: List<AWS::EC2::SecurityGroup::Id>
  SubnetIds:
    Description: List of subnets to associate to the Autoscaling Group
    Type: List<AWS::EC2::Subnet::Id>
  TargetGroupArns:
    Default: ''
    Description: >-
      Comma-separated string of Target Group ARNs to associate with the
      Autoscaling Group; conflicts with LoadBalancerNames
    Type: CommaDelimitedList
  ToggleCfnInitUpdate:
    AllowedValues:
      - A
      - B
    Default: A
    Description: >-
      A/B toggle that forces a change to instance metadata, triggering the
      cfn-init update sequence
    Type: String
  ToggleNewInstances:
    AllowedValues:
      - A
      - B
    Default: A
    Description: >-
      A/B toggle that forces a change to instance userdata, triggering new
      instances via the Autoscale update policy
    Type: String
  WatchmakerAdminGroups:
    Default: ''
    Description: >-
      (Optional) Colon-separated list of domain groups that should have admin
      permissions on the EC2 instance
    Type: String
  WatchmakerAdminUsers:
    Default: ''
    Description: >-
      (Optional) Colon-separated list of domain users that should have admin
      permissions on the EC2 instance
    Type: String
  WatchmakerExtraArgs:
    Default: ''
    Description: >-
      (Optional) Additional Watchmaker parameters.  E.g. --exclude-states scap*scan
      or --salt-states 'None'
    Type: String
  WatchmakerConfig:
    AllowedPattern: '^$|^(http[s]?|s3|file)://.*$'
    Default: ''
    Description: >-
      (Optional) Path to a Watchmaker config file.  The config file path can be
      a remote source (i.e. http[s]://, s3://) or local directory (i.e. file://)
    Type: String
  WatchmakerEnvironment:
    AllowedValues:
      - ''
      - dev
      - test
      - prod
    Default: ''
    Description: Environment in which the instance is being deployed
    Type: String
  WatchmakerOuPath:
    AllowedPattern: '^$|^(OU=.+,)+(DC=.+)+$'
    Default: ''
    Description: >-
      (Optional) DN of the OU to place the instance when joining a domain. If
      blank and "WatchmakerEnvironment" enforces a domain join, the instance
      will be placed in a default container. Leave blank if not joining a
      domain, or if "WatchmakerEnvironment" is "false"
    Type: String
  WatchmakerStandaloneUrl:
    AllowedPattern: '^$|^(http[s]?)://.*$'
    Default: ''
    Description: >-
      (Optional) HTTP/S URL to a Watchmaker standalone executable. The file will
      be retrieved and used to run Watchmaker, instead of installing Watchmaker
      from PyPi
    Type: String
  WatchmakerVersion:
    AllowedPattern: '^$|^[0-9]*\.[0-9]*\.[0-9]*$'
    Default: ''
    Description: >-
      (Optional) Watchmaker version to install. When blank (the default) the latest
      version will be installed. Used only when Watchmaker is installed from PyPi
    Type: String
Resources:
  ScaleDownScheduledAction:
    Condition: UseScheduledAction
    Properties:
      AutoScalingGroupName: !Ref WatchmakerAutoScalingGroup
      DesiredCapacity: !Ref MinCapacity
      Recurrence: !Ref ScaleDownSchedule
    Type: AWS::AutoScaling::ScheduledAction
  ScaleUpScheduledAction:
    Condition: UseScheduledAction
    Properties:
      AutoScalingGroupName: !Ref WatchmakerAutoScalingGroup
      DesiredCapacity: !Ref MaxCapacity
      Recurrence: !Ref ScaleUpSchedule
    Type: AWS::AutoScaling::ScheduledAction
  WatchmakerAutoScalingGroup:
    CreationPolicy:
      ResourceSignal:
        Count: !Ref DesiredCapacity
        Timeout: !Sub PT${CfnStackSignalTimeout}M
    Properties:
      DesiredCapacity: !Ref DesiredCapacity
      HealthCheckGracePeriod: !If
        - UseElbHealthCheck
        - 3600
        - !Ref 'AWS::NoValue'
      HealthCheckType: !If
        - UseElbHealthCheck
        - ELB
        - EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref WatchmakerLaunchTemplate
        Version: !GetAtt WatchmakerLaunchTemplate.LatestVersionNumber
      LoadBalancerNames: !If
        - UseLoadBalancerNames
        - !Ref LoadBalancerNames
        - !Ref 'AWS::NoValue'
      MaxSize: !Ref MaxCapacity
      MetricsCollection: !If
        - UseAsgMetricsCollection
        -
          -
            Granularity: "1Minute"
            Metrics: !Ref AsgMetrics
        - !Ref 'AWS::NoValue'
      MinSize: !Ref MinCapacity
      NotificationConfigurations: !If
        - UseAsgNotifications
        -
          -
            NotificationTypes: !Ref AsgNotificationTypes
            TopicARN: !Ref AsgSnsArn
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
          PropagateAtLaunch: true
        - !If
          - CreatePatchGroupTag
          -
            Key: Patch Group
            Value: !Ref PatchGroup
            PropagateAtLaunch: true
          - !Ref 'AWS::NoValue'
      TargetGroupARNs: !If
        - UseTargetGroupArns
        - !Ref TargetGroupArns
        - !Ref 'AWS::NoValue'
      TerminationPolicies: !If
        - UseTerminationPolicies
        - !Ref InstanceTerminationPolicies
        - !Ref 'AWS::NoValue'
      VPCZoneIdentifier: !Ref SubnetIds
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  WatchmakerLaunchTemplate:
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          launch:
            - setup
            - !If
              - InstallCloudWatchAgent
              - cw-agent-install
              - !Ref 'AWS::NoValue'
            - !If
              - EnablingRepos
              - enable-repos
              - !Ref 'AWS::NoValue'
            - watchmaker-install
            - watchmaker-launch
            - !If
              - ExecuteAppScript
              - make-app
              - !Ref 'AWS::NoValue'
            - finalize
            - !If
              - Reboot
              - reboot
              - !Ref 'AWS::NoValue'
          update:
            - setup
            - !If
              - InstallUpdates
              - install-updates
              - !Ref 'AWS::NoValue'
            - watchmaker-install
            - watchmaker-update
            - !If
              - ExecuteAppScript
              - make-app
              - !Ref 'AWS::NoValue'
            - finalize
            - !If
              - Reboot
              - reboot
              - !Ref 'AWS::NoValue'
        cw-agent-install:
          commands:
            01-install-cloudwatch-agent:
              command: !Sub >-
                aws s3 cp ${CloudWatchAgentUrl} /etc/cfn/scripts/amazon-cloudwatch-agent.rpm &&
                yum -y --nogpgcheck localinstall /etc/cfn/scripts/amazon-cloudwatch-agent.rpm
            03-manipulate-cloudwatch-config:
              command: >-
                python3 /etc/cfn/scripts/aws-cw-agent/cloudwatch-applog-config.py
            10-start-cloudwatch-agent:
              command: >-
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl
                -a fetch-config -m ec2 -c
                file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
              cwd: /etc/cfn/scripts/aws-cw-agent
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |-
                    {
                      "logs":
                      {
                        "logs_collected":
                        {
                          "files":
                          {
                            "collect_list": [
                              {
                                "file_path": "/var/log/amazon/ssm/amazon-ssm-agent.log",
                                "log_group_name": "/aws/ec2/lx/${AWS::StackName}",
                                "log_stream_name": "{instance_id}//var/log/amazon/ssm/amazon-ssm-agent.log",
                                "timestamp_format": "%H:%M:%S %y %b %-d"
                              },
                              {
                                "file_path": "/var/log/amazon/ssm/errors.log",
                                "log_group_name": "/aws/ec2/lx/${AWS::StackName}",
                                "log_stream_name": "{instance_id}//var/log/amazon/ssm/errors.log",
                                "timestamp_format": "%H:%M:%S %y %b %-d"
                              },
                              {
                                "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                                "log_group_name": "/aws/ec2/lx/${AWS::StackName}",
                                "log_stream_name": "{instance_id}//opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                                "timestamp_format": "%H:%M:%S %y %b %-d"
                              },
                              {
                                "file_path": "/var/log/cfn-init.log",
                                "log_group_name": "/aws/ec2/lx/${AWS::StackName}",
                                "log_stream_name": "{instance_id}//var/log/cfn-init.log",
                                "timestamp_format": "%H:%M:%S %y %b %-d"
                              },
                              {
                                "file_path": "/var/log/cfn-init-cmd.log",
                                "log_group_name": "/aws/ec2/lx/${AWS::StackName}",
                                "log_stream_name": "{instance_id}//var/log/cfn-init-cmd.log",
                                "timestamp_format": "%H:%M:%S %y %b %-d"
                              },
                              {
                                "file_path": "/var/log/messages",
                                "log_group_name": "/aws/ec2/lx/${AWS::StackName}",
                                "log_stream_name": "{instance_id}//var/log/messages",
                                "timestamp_format": "%H:%M:%S %y %b %-d"
                              },
                              {
                                "file_path": "/var/log/watchmaker/watchmaker.log",
                                "log_group_name": "/aws/ec2/lx/${AWS::StackName}",
                                "log_stream_name": "{instance_id}//var/log/watchmaker/watchmaker.log",
                                "timestamp_format": "%H:%M:%S %y %b %-d"
                              },
                              {
                                "file_path": "/var/log/watchmaker/salt_call.debug.log",
                                "log_group_name": "/aws/ec2/lx/${AWS::StackName}",
                                "log_stream_name": "{instance_id}//var/log/watchmaker/salt_call.debug.log",
                                "timestamp_format": "%H:%M:%S %y %b %-d"
                              }
                            ]
                          }
                        },
                        "log_stream_name": "default_logs_{instance_id}"
                      }
                    }
            /etc/cfn/scripts/aws-cw-agent/cloudwatch-applog-config.py:
              content: !Sub
                - |
                  import json
                  import os

                  CWA_CONFIG = "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json"
                  LOG_GROUP = "/aws/ec2/lx/${AWS::StackName}"
                  LOG_PATHS = (r'''${local_addCWLtarget}''').split(",")


                  def get_stream_name(path):
                      return '{{instance_id}}/{}'.format(path.replace('*', '('))


                  def load_json(path):
                      with open(path, 'r') as fh_:
                          return json.load(fh_)


                  def dump_json(path, data):
                      with open(path, 'w') as fh_:
                          fh_.write(json.dumps(data, sort_keys=True, indent=4))


                  if LOG_PATHS:
                      print('Additional cwl paths were defined...')
                      print('Loading existing cwl baseline')
                      config = load_json(CWA_CONFIG)
                      for log in LOG_PATHS:
                          config['logs']['logs_collected']['files']['collect_list'].append({
                              'file_path': log,
                              'log_group_name': LOG_GROUP,
                              'log_stream_name': get_stream_name(log),
                              'timestamp_format': "%H:%M:%S %y %b %-d"
                          })
                      print('Writing new cwl baseline')
                      dump_json(CWA_CONFIG, config)
                      print('CWL baseline modification complete')
                # convert CommaDelimitedList to a string for Fn::Sub compatibility
                - local_addCWLtarget: !Join [",", !Ref CloudWatchAppLogs]
        finalize:
          commands:
            10-signal-success:
              command: !Sub
                - >-
                  cfn-signal -e 0 --stack ${AWS::StackName} --resource WatchmakerAutoScalingGroup --region ${AWS::Region}
                  ${local_AssignInstanceRole}
                  ${local_UseCfnUrl}
                -
                  local_AssignInstanceRole: !If [AssignInstanceRole, !Sub '--role ${InstanceRole}', '']
                  local_UseCfnUrl: !If [UseCfnUrl, !Sub '--url ${CfnEndpointUrl}', '']
              ignoreErrors: 'true'
        install-updates:
          commands:
            10-install-updates:
              command: yum -y update
        enable-repos:
          commands:
            10-enable-repos:
              command:
                !Sub 'yum-config-manager --enable ${EnableRepos}'
        make-app:
          commands:
            05-get-appscript:
              command:
                !Sub >-
                    mkdir -p /etc/cfn/scripts &&
                    aws s3 cp ${AppScriptUrl}
                    /etc/cfn/scripts/make-app &&
                    chown root:root /etc/cfn/scripts/make-app &&
                    chmod 700 /etc/cfn/scripts/make-app
            10-make-app:
              command: !Sub '${AppScriptShell} /etc/cfn/scripts/make-app ${AppScriptParams}'
        reboot:
          commands:
            10-reboot:
              command: shutdown -r +1 &
        setup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub
                - |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                  ${local_AssignInstanceRole}
                  ${local_UseCfnUrl}
                  interval=1
                  verbose=true
                -
                  local_AssignInstanceRole: !If [AssignInstanceRole, !Sub 'role=${InstanceRole}', '']
                  local_UseCfnUrl: !If [UseCfnUrl, !Sub 'url=${CfnEndpointUrl}', '']
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub
                - |-
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.WatchmakerInstance.Metadata
                    action=cfn-init -v -c update --stack ${AWS::StackName} --resource WatchmakerLaunchTemplate --region ${AWS::Region} ${local_AssignInstanceRole} ${local_UseCfnUrl}
                    runas=root
                -
                  local_AssignInstanceRole: !If [AssignInstanceRole, !Sub '--role ${InstanceRole}', '']
                  local_UseCfnUrl: !If [UseCfnUrl, !Sub '--url ${CfnEndpointUrl}', '']
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/scripts/watchmaker-install.sh:
              content:
                !If
                  - UseWamStandalone
                  - !Sub |
                      #!/bin/bash
                      curl --fail -sSL -o /etc/cfn/scripts/watchmaker ${WatchmakerStandaloneUrl}
                      chown root:root /etc/cfn/scripts/watchmaker
                      chmod +x /etc/cfn/scripts/watchmaker
                  - !Sub
                    - |
                      #!/bin/bash
                      PYPI_URL=${PypiIndexUrl}

                      # Setup terminal support for UTF-8
                      export LC_ALL=en_US.UTF-8
                      export LANG=en_US.UTF-8

                      python3 -m ensurepip

                      PIP_PKG=pip
                      if [[ $(cat /proc/version | grep -o 'el.') == 'el6' ]]
                      then
                        PIP_PKG='pip<=19.1.*'
                      fi
                      python3 -m pip install --index-url="$PYPI_URL" --upgrade "$PIP_PKG" setuptools boto3
                      python3 -m pip install --index-url="$PYPI_URL" --upgrade ${local_WatchmakerPkg}
                    -
                      local_WatchmakerPkg: !If [PinWatchmakerVersion, !Sub 'watchmaker==${WatchmakerVersion}', 'watchmaker']
              group: root
              mode: '000700'
              owner: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        watchmaker-install:
          commands:
            10-watchmaker-install:
              command: bash -xe /etc/cfn/scripts/watchmaker-install.sh
        watchmaker-launch:
          commands:
            10-watchmaker-launch:
              command: !Sub
                - >-
                  PATH="/etc/cfn/scripts:$PATH" watchmaker --log-level debug --log-dir /var/log/watchmaker --no-reboot
                  ${local_UseWamConfig}
                  ${local_UseEnvironment}
                  ${local_UseOUPath}
                  ${local_UseAdminGroups}
                  ${local_UseAdminUsers}
                  ${WatchmakerExtraArgs}
                -
                  local_UseWamConfig: !If [UseWamConfig, !Sub '--config ${WatchmakerConfig}', '']
                  local_UseEnvironment: !If [UseEnvironment, !Sub '--env ${WatchmakerEnvironment}', '']
                  local_UseOUPath: !If [UseOuPath, !Sub '--ou-path ${WatchmakerOuPath}', '']
                  local_UseAdminGroups: !If [UseAdminGroups, !Sub '--admin-groups ${WatchmakerAdminGroups}', '']
                  local_UseAdminUsers: !If [UseAdminUsers, !Sub '--admin-users ${WatchmakerAdminUsers}', '']
        watchmaker-update:
          commands:
            10-watchmaker-update:
              command: !Sub
                - >-
                  PATH="/etc/cfn/scripts:$PATH" watchmaker --log-level debug --log-dir /var/log/watchmaker --no-reboot --salt-states None
                  ${local_UseWamConfig}
                  ${local_UseEnvironment}
                  ${local_UseOUPath}
                  ${local_UseAdminGroups}
                  ${local_UseAdminUsers}
                  ${WatchmakerExtraArgs}
                -
                  local_UseWamConfig: !If [UseWamConfig, !Sub '--config ${WatchmakerConfig}', '']
                  local_UseEnvironment: !If [UseEnvironment, !Sub '--env ${WatchmakerEnvironment}', '']
                  local_UseOUPath: !If [UseOuPath, !Sub '--ou-path ${WatchmakerOuPath}', '']
                  local_UseAdminGroups: !If [UseAdminGroups, !Sub '--admin-groups ${WatchmakerAdminGroups}', '']
                  local_UseAdminUsers: !If [UseAdminUsers, !Sub '--admin-users ${WatchmakerAdminUsers}', '']
      ToggleCfnInitUpdate: !Ref ToggleCfnInitUpdate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: !Sub
              - '/dev/${local_Distro2RootDevice}'
              - local_Distro2RootDevice: !FindInMap [Distro2RootDevice, !Ref AmiDistro, DeviceName]
            Ebs:
              DeleteOnTermination: true
              Encrypted: !Ref RootVolumeEncrypted
              VolumeSize: !Ref RootVolumeSize
              VolumeType: gp2
          - !If
            - CreateAppVolume
            - DeviceName: !Ref AppVolumeDeviceName
              Ebs:
                DeleteOnTermination: true
                Encrypted: !Ref AppVolumeEncrypted
                SnapshotId: !If
                  - UseAppVolumeSnapshot
                  - !Ref AppVolumeSnapshotId
                  - !Ref 'AWS::NoValue'
                VolumeSize: !Ref AppVolumeSize
                VolumeType: !Ref AppVolumeType
            - !Ref 'AWS::NoValue'
        EbsOptimized: !Ref EbsOptimized
        IamInstanceProfile: !If
          - AssignInstanceRole
          - Name: !Ref InstanceRole
          - !Ref AWS::NoValue
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        NetworkInterfaces:
          - AssociatePublicIpAddress: !If
              - AssignPublicIp
              - true
              - false
            DeviceIndex: 0
            Groups: !Ref SecurityGroupIds
        UserData:
          !Base64
            Fn::Sub:
              - |
                Content-Type: multipart/mixed; boundary="===============3585321300151562773=="
                MIME-Version: 1.0
                --===============3585321300151562773==
                Content-Type: text/cloud-config; charset="us-ascii"
                MIME-Version: 1.0
                Content-Transfer-Encoding: 7bit
                Content-Disposition: attachment; filename="cloud.cfg"

                #cloud-config
                ${local_ExpandRootVolume}

                --===============3585321300151562773==
                Content-Type: text/x-shellscript; charset="us-ascii"
                MIME-Version: 1.0
                Content-Transfer-Encoding: 7bit
                Content-Disposition: attachment; filename="script.sh"

                #!/bin/bash -xe

                # Format and mount app volume
                if [[ "${AppVolumeDevice}" == "true" ]]
                then
                  MOUNT_VFSTYPE="auto"
                  MOUNT_OPTS="defaults,nofail"
                  cloud-init-per instance mkfsappvolume mkfs -t ext4 "${AppVolumeDeviceName}"
                  grep -q "${AppVolumeDeviceName}" /etc/fstab || printf "%s\t%s\t%s\t%s\t0\t2\n" "${AppVolumeDeviceName}" "${AppVolumeMountPath}" "$MOUNT_VFSTYPE" "$MOUNT_OPTS" >> /etc/fstab
                  mkdir -p "${AppVolumeMountPath}"
                  mount -a
                fi

                # Suppress erroneous LVM file descriptor warnings
                # https://access.redhat.com/solutions/49144
                export LVM_SUPPRESS_FD_WARNINGS=1

                # Extend any available LVM PVs
                if [[ -x $( which pvs ) ]]
                then
                  LVMPVS=($(pvs --noheadings -o pv_name))
                  for PV in "${!LVMPVS[@]}"
                  do
                      pvresize ${!PV}
                  done
                fi

                # CFN LaunchTemplate Update Toggle: ${ToggleNewInstances}

                # Setup terminal support for UTF-8
                export LC_ALL=en_US.UTF-8
                export LANG=en_US.UTF-8

                # Export AWS ENVs
                test -r /etc/aws/models/endpoints.json && export AWS_DATA_PATH=/etc/aws/models || true
                export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt
                export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt
                export AWS_DEFAULT_REGION=${AWS::Region}

                # Ensure cfn utils are in path
                hash cfn-signal 2> /dev/null || PATH="${!PATH}:/usr/local/bin:/opt/aws/bin"

                # Execute cfn-init
                cfn-init -v -c launch --stack ${AWS::StackName} --resource WatchmakerLaunchTemplate --region ${AWS::Region} \
                  ${local_AssignInstanceRole} ${local_UseCfnUrl} || \
                  ( echo 'ERROR: cfn-init failed! Aborting!'; cfn-signal -e 1 --stack ${AWS::StackName} --resource WatchmakerAutoScalingGroup --region ${AWS::Region} \
                  ${local_AssignInstanceRole} ${local_UseCfnUrl}; exit 1)
                --===============3585321300151562773==--
              -
                local_AssignInstanceRole: !If [AssignInstanceRole, !Sub '--role ${InstanceRole}', '']
                local_ExpandRootVolume: !If
                  - ExpandRootVolume
                  - |+
                    growpart:
                      mode: auto
                      devices: [ '/dev/xvda', '/dev/xvda2', '/dev/nvme0n1', '/dev/nvme0n1p2' ]
                      ignore_growroot_disabled: false
                  - ''
                local_UseCfnUrl: !If [UseCfnUrl, !Sub '--url ${CfnEndpointUrl}', '']
      LaunchTemplateName: !Ref AWS::StackName
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: !Ref AWS::StackName
    Type: AWS::EC2::LaunchTemplate
  WatchmakerLaunchConfigLogGroup:
    Condition: InstallCloudWatchAgent
    Properties:
      LogGroupName: !Sub '/aws/ec2/lx/${AWS::StackName}'
    Type: AWS::Logs::LogGroup
